CS 

 Symbolic computation  

Considering that it's difficult to dealing with symbolic expressions which are stored in the form of strings, we put forward an idea that the symbolic expression is stored in a right-thread binary tree, and we minimize the right-thread binary tree so that the symbolic expression could be simplified. For a right-threaded binary tree that represents a symbolic expression, we traverse its nodes in order of its corresponding postfix expression. During the traversal, we simplify the expression. The Algorithm not only minimizes the tree, but also transforms the tree into an expression string. Experiments show that most symbolic expressions can be simplified by the method. As we all know, expression simplification is one of the most fundamental functions for any symbolic computation software and it's also the core of the software([1]). There are many studies and algorithms on symbolic expression simplification in the past. However, no general algorithm has been found that could simplify a symbolic expression perfectly. So, both algorithm and innovative research for data structure about symbolic expression simplification are of enormous significance. Taking various functions models into account, this text makes use of people's thinking pattern and skills, and simplify the symbolic expression by minimize the right-thread binary tree during LDR traversal. What we get by traversing the right-thread binary tree in order of LDR is the symbolic expression's postfix expression (also called Reverse Polish Expression). When dealing with a symbolic expression in the form of postfix expression, we can take no account of the priority of operators. So when it turns to an operator, we can directly take out front operands to operate. As a result, the LDR traversal of the tree makes it possible we simplify symbolic expressions. The text will explain the algorithm in detail.