CS 

 Distributed computing  

Desktop grid systems are distributed computing paradigms which use the idle and underutilized processing cycles and memory of the desktop machines (hosts) to support large scale computations. These systems have inherent uncertainties because the hosts do not work under one administrative domain and can become unavailable at any given point in time. Desktop grid frameworks are based on client server model and employ various scheduling policies at both ends to handle the hostile desktop grid environment. At server end, task scheduling policies are deployed whereas work fetch and CPU scheduling policies are implemented at client end. Task scheduling policy decides which job will be send to client depending upon client and task preferences. Work fetch policy determines when the client can ask for more work from server and CPU scheduling policy selects the job for execution from the jobs available on client. This policy works on top of local operating system's scheduler. In this paper, we evaluated the impact of CPU scheduling policies on the application's performance by using BOINC Client and BOINC Client Emulator (BCE). We analyzed two most widely used CPU scheduling mechanisms by using four scenarios and five performance measures. We found that Early Deadline First (EDF) works better as compared to traditional Round Robin (RR) mechanism in most of the cases.